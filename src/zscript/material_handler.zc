// Handles events for level geometry composed of a particular material
class MaterialHandler : EventHandler version("3.7")
{
    // Custom UDMF properties
    const MaterialLineProp = "user_material";
    const MaterialFloorProp = "user_materialfloor";
    const MaterialCeilingProp = "user_materialceiling";
    const Material3dProp = "user_material3d";

    String materialName;        // Name of material (matched against UDMF properties)
    Array<String> textures;     // Textures associated w/ material

    int health;                 // Initial health for geometry of this material

    // Table of damage factors
    // Damage to geometry is multiplied by damage factor for its type before being applied to geometry
    Array<String> damageTypes;
    Array<double> damageFactors;

    // Lists of all level geometry w/ this material
    Array<Line> lines;
    Array<Sector> sectorsFloor;
    Array<Sector> sectorsCeiling;
    Array<Sector> sectors3d;


    // Dispatches line/sector material initialization events
    override void WorldLoaded(WorldEvent e)
    {
        if (e.isReopen) return;

        for (int i = 0; i < level.lines.Size(); ++i)
        {
            Line l = level.lines[i];
            if (HasMaterialLine(l)) MaterialLineInit(l);
        }

        for (int i = 0; i < level.sectors.Size(); ++i)
        {
            Sector s = level.sectors[i];
            if (HasMaterialFloor(s)) MaterialFloorInit(s);
            if (HasMaterialCeiling(s)) MaterialCeilingInit(s);
            if (HasMaterial3d(s)) Material3dInit(s);
        }
    }

    // Dispatches line damage/destruction events
    override void WorldLineDamaged(WorldEvent e)
    {
        if (lines.Find(e.damageLine) < lines.Size())
        {
            MaterialLineDamaged(e);
            if (e.damageLine.GetHealth() - e.newDamage <= 0) MaterialLineDestroyed(e);
        }
    }

    // Dispatches sector damage/destruction events
    override void WorldSectorDamaged(WorldEvent e)
    {
        if (e.damageSectorPart == SECPART_Floor
            && sectorsFloor.Find(e.damageSector) < sectorsFloor.Size())
        {
            MaterialFloorDamaged(e);
            if (e.damageSector.GetHealth(SECPART_Floor) - e.newDamage <= 0) MaterialFloorDestroyed(e);
        }
        else if (e.damageSectorPart == SECPART_Ceiling
            && sectorsCeiling.Find(e.damageSector) < sectorsCeiling.Size())
        {
            MaterialCeilingDamaged(e);
            if (e.damageSector.GetHealth(SECPART_Ceiling) - e.newDamage <= 0) MaterialCeilingDestroyed(e);
        }
        else if (e.damageSectorPart == SECPART_3d
            && sectors3d.Find(e.damageSector) < sectors3d.Size())
        {
            Material3dDamaged(e);
            if (e.damageSector.GetHealth(SECPART_3d) - e.newDamage <= 0) Material3dDestroyed(e);
        }
    }

    // Dispatches material tick events
    override void WorldTick()
    {
        for (int i = 0; i < lines.Size(); ++i)
        {
            if (lines[i].GetHealth() > 0) MaterialLineTick(lines[i]);
        }

        for (int i = 0; i < sectorsFloor.Size(); ++i)
        {
            if (sectorsFloor[i].GetHealth(SECPART_Floor) > 0) MaterialFloorTick(sectorsFloor[i]);
        }

        for (int i = 0; i < sectorsCeiling.Size(); ++i)
        {
            if (sectorsCeiling[i].GetHealth(SECPART_Ceiling) > 0) MaterialCeilingTick(sectorsCeiling[i]);
        }

        for (int i = 0; i < sectors3d.Size(); ++i)
        {
            if (sectors3d[i].GetHealth(SECPART_3d) > 0) Material3dTick(sectors3d[i]);
        }
    }


    // Called when a line w/ this material is initialized
    // Override if you want to do more than set health
    virtual void MaterialLineInit(Line l)
    {
        lines.Push(l);
        if (l.GetHealth() == 0) l.SetHealth(health);

        /*Console.Printf(
            "Line material assigned\n"
            "  Line #: %d\n"
            "  Material: %s",
            l.Index(),
            materialName);*/
    }

    // Called when a line w/ this material is damaged
    // Override if you want to do more than handle damage types
    virtual void MaterialLineDamaged(WorldEvent e)
    {
        e.newDamage = ApplyDamageFactor(e.damageType, e.damage);

        /*Console.Printf(
            "Line damaged\n"
            "  Line #: %d\n"
            "  Material: %s\n"
            "  Damage type: %s\n"
            "  Base damage: %d\n"
            "  Modified damage: %d\n"
            "  Remaining HP: %d",
            e.damageLine.Index(),
            materialName,
            e.damageType,
            e.damage,
            e.newDamage,
            e.damageLine.GetHealth() - e.newDamage);*/
    }

    // Called when a line w/ this material is destroyed
    // Override if you want to do more than make line non-blocking
    virtual void MaterialLineDestroyed(WorldEvent e)
    {
        if (e.damageLine.flags & Line.ML_TwoSided)
        {
            e.damageLine.flags &=
                ~(Line.ML_Blocking
                | Line.ML_BlockMonsters
                | Line.ML_Block_Players
                | Line.ML_BlockEverything
                | Line.ML_BlockProjectile
                | Line.ML_BlockUse
                | Line.ML_BlockSight
                | Line.ML_BlockHitscan
                | Line.ML_3dMidTex_Impass);

            let oldActivation = e.damageLine.activation;
            e.damageLine.activation = SPAC_Impact;
            e.damageLine.Activate(e.damageSource, e.damageLineSide, SPAC_Impact);
            e.damageLine.activation = oldActivation;

            /*Console.Printf(
                "Line destroyed\n"
                "  Line #: %d",
                e.damageLine.Index());*/
        }
    }

    // Called every tick for each line w/ this material
    virtual void MaterialLineTick(Line l) {}


    // Called when a floor w/ this material is initialized
    // Override if you want to do more than set health
    virtual void MaterialFloorInit(Sector s)
    {
        sectorsFloor.Push(s);
        if (s.GetHealth(SECPART_Floor) == 0) s.SetHealth(SECPART_Floor, health);

        /*Console.Printf(
            "Floor material assigned\n"
            "  Sector #: %d\n"
            "  Material: %s",
            s.Index(),
            materialName);*/
    }

    // Called when a floor w/ this material is damaged
    // Override if you want to do more than handle damage types
    virtual void MaterialFloorDamaged(WorldEvent e)
    {
        e.newDamage = ApplyDamageFactor(e.damageType, e.damage);

        /*Console.Printf(
            "Floor damaged\n"
            "  Sector #: %d\n"
            "  Material: %s\n"
            "  Damage type: %s\n"
            "  Base damage: %d\n"
            "  Modified damage: %d\n"
            "  Remaining HP: %d",
            e.damageSector.Index(),
            materialName,
            e.damageType,
            e.damage,
            e.newDamage,
            e.damageSector.GetHealth(SECPART_Floor) - e.newDamage);*/
    }

    // Called when a floor w/ this material is destroyed
    virtual void MaterialFloorDestroyed(WorldEvent e)
    {
        /*Console.Printf(
            "Floor destroyed\n"
            "  Sector #: %d",
            e.damageSector.Index());*/
    }

    // Called every tick for each floor w/ this material
    virtual void MaterialFloorTick(Sector s) {}


    // Called when a ceiling w/ this material is initialized
    // Override if you want to do more than set health
    virtual void MaterialCeilingInit(Sector s)
    {
        sectorsCeiling.Push(s);
        if (s.GetHealth(SECPART_Ceiling) == 0) s.SetHealth(SECPART_Ceiling, health);

        /*Console.Printf(
            "Ceiling material assigned\n"
            "  Sector #: %d\n"
            "  Material: %s",
            s.Index(),
            materialName);*/
    }

    // Called when a ceiling w/ this material is damaged
    // Override if you want to do more than handle damage types
    virtual void MaterialCeilingDamaged(WorldEvent e)
    {
        e.newDamage = ApplyDamageFactor(e.damageType, e.damage);

        /*Console.Printf(
            "Ceiling damaged\n"
            "  Sector #: %d\n"
            "  Material: %s\n"
            "  Damage type: %s\n"
            "  Base damage: %d\n"
            "  Modified damage: %d\n"
            "  Remaining HP: %d",
            e.damageSector.Index(),
            materialName,
            e.damageType,
            e.damage,
            e.newDamage,
            e.damageSector.GetHealth(SECPART_Ceiling) - e.newDamage);*/
    }

    // Called when a ceiling w/ this material is destroyed
    virtual void MaterialCeilingDestroyed(WorldEvent e)
    {
        /*Console.Printf(
            "Ceiling destroyed\n"
            "  Sector #: %d",
            e.damageSector.Index());*/
    }

    // Called when a ceiling w/ this material is initialized
    virtual void MaterialCeilingTick(Sector s) {}


    // Called when a 3D floor w/ this material is initialized
    // Override if you want to do more than set health
    virtual void Material3dInit(Sector s)
    {
        sectors3d.Push(s);
        if (s.GetHealth(SECPART_3d) == 0) s.SetHealth(SECPART_3d, health);

        /*Console.Printf(
            "3d floor material assigned\n"
            "  Sector #: %d\n"
            "  Material: %s\n"
            "  Health: %d",
            s.Index(),
            materialName,
            s.GetHealth(SECPART_3d));*/
    }

    // Called when a 3D floor w/ this material is damaged
    // Override if you want to do more than handle damage factors
    virtual void Material3dDamaged(WorldEvent e)
    {
        e.newDamage = ApplyDamageFactor(e.damageType, e.damage);

        /*Console.Printf(
            "3d floor damaged\n"
            "  Sector #: %d\n"
            "  Material: %s\n"
            "  Damage type: %s\n"
            "  Base damage: %d\n"
            "  Modified damage: %d\n"
            "  Remaining HP: %d",
            e.damageSector.Index(),
            materialName,
            e.damageType,
            e.damage,
            e.newDamage,
            e.damageSector.GetHealth(SECPART_3d) - e.newDamage);*/
    }

    // Called when a 3D floor w/ this material is destroyed
    virtual void Material3dDestroyed(WorldEvent e)
    {
        /*Console.Printf(
            "3d floor destroyed\n"
            "  Sector #: %d",
            e.damageSector.Index());*/
    }

    // Called every tick for each 3d floor w/ this material
    virtual void Material3dTick(Sector s) {}


    // Returns true if line has this material
    bool HasMaterialLine(Line l)
    {
        if (l.GetUdmfString(materialLineProp))
        {   // UDMF property
            return l.GetUdmfString(materialLineProp) ~== materialName;
        }
        else if (IsLineDoor(l))
        {
            // Upper textures
            if (l.flags & Line.ML_TwoSided)
            {
                TextureId frontTopTex = l.sidedef[0].GetTexture(Side.top);
                TextureId backTopTex = l.sidedef[1].GetTexture(Side.top);
                return IsMaterialTexture(frontTopTex) || IsMaterialTexture(backTopTex);
            }
        }
        {   // Mid textures
            TextureId frontMidTex = l.sidedef[0].GetTexture(Side.mid);
            if (l.flags & Line.ML_TwoSided)
            {
                TextureId backMidTex = l.sidedef[1].GetTexture(Side.mid);
                return IsMaterialTexture(frontMidTex) && IsMaterialTexture(backMidTex);
            }
            else
            {
                return IsMaterialTexture(frontMidTex);
            }
        }
    }

    // Returns true if floor has this material
    bool HasMaterialFloor(Sector s)
    {
        if (s.GetUdmfString(materialFloorProp))
        {   // UDMF property
            return s.GetUdmfString(materialFloorProp) ~== materialName;
        }
        else
        {   // Floor flat
            return IsMaterialTexture(s.GetTexture(Sector.floor));
        }
    }

    // Returns true if ceiling has this material
    bool HasMaterialCeiling(Sector s)
    {
        if (s.GetUdmfString(materialCeilingProp))
        {   // UDMF property
            return s.GetUdmfString(materialCeilingProp) ~== materialName;
        }
        else
        {   // Ceiling flat
            return IsMaterialTexture(s.GetTexture(Sector.ceiling));
        }
    }

    // Returns true if 3D floor has this material
    bool HasMaterial3d(Sector s)
    {
        if (s.GetUdmfString(material3dProp))
        {   // UDMF property
            return s.GetUdmfString(material3dProp) ~== materialName;
        }
        else
        {   // Textures & flats
            for (int i = 0; i < s.lines.Size(); ++i)
            {
                Line l = s.lines[i];
                TextureId frontMidTex = l.sidedef[0].GetTexture(Side.mid);
                if (!IsMaterialTexture(frontMidTex)) return false;
            }

            return IsMaterialTexture(s.GetTexture(Sector.floor)) && IsMaterialTexture(s.GetTexture(Sector.ceiling));
        }
    }

    // Returns true if texture represents this material
    bool IsMaterialTexture(TextureId tex)
    {
        String texName = TexMan.GetName(tex);
        for (int i = 0; i < textures.Size(); ++i)
        {
            if (textures[i] ~== texName) return true;
        }

        return false;
    }

    // Returns true if line is a door
    bool IsLineDoor(Line l)
    {
        return l.special >= 10 && l.special < 15 || l.special == 202 || l.special == 249;
    }


    // Sets damage factor for given damage type
    void SetDamageFactor(String type, double factor)
    {
        for (int i = 0; i < damageTypes.Size(); ++i)
        {
            if (damageTypes[i] ~== type)
            {
                damageFactors[i] = factor;
                return;
            }
        }

        damageTypes.Push(type);
        damageFactors.Push(factor);
    }

    // Returns damage multiplied by appropriate damage factor
    int ApplyDamageFactor(String type, int damage)
    {
        for (int i = 0; i < damageTypes.Size(); ++i)
        {
            if (damageTypes[i] ~== type) return damageFactors[i] * damage;
        }

        for (int i = 0; i < damageTypes.Size(); ++i)
        {
            if (damageTypes[i] ~== "") return damageFactors[i] * damage;
        }

        return damage;
    }
}